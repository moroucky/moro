<!DOCTYPE html>
<html lang="it" dir="ltr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MOHCEN MIGO - Negozio Attrezzature</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #F9FAFB;
            color: #1F2937;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        :root {
            --theme-primary: #DC2626; /* Red-600 */
            --theme-primary-hover: #B91C1C; /* Red-700 */
            --theme-secondary: #4B5563;
            --theme-accent: #F59E0B;
            --theme-light-gray: #F3F4F6;
            --theme-border-color: #D1D5DB;
            --text-dark: #111827;
            --text-medium: #374151;
            --text-light: #6B7280;
            --text-on-primary: #FFFFFF;
            --bg-card: #FFFFFF;
            --bg-header: #FFFFFF;
            --bg-top-bar: #E5E7EB;
            --bg-footer: #1F2937;
            --text-footer: #D1D5DB;
            --sidebar-bg: #1F2937;
            --sidebar-text: #D1D5DB;
            --sidebar-text-hover: #FFFFFF;
            --sidebar-icon: #9CA3AF;
            --sidebar-icon-hover: var(--theme-primary);
            --sidebar-active-bg: #374151;
            --sidebar-border: #4B5563; 
        }

        /* General Styles */
        .top-bar { background-color: var(--bg-top-bar); color: var(--text-medium); font-size: 0.8rem; padding: 0.5rem 0; border-bottom: 1px solid var(--theme-border-color); }
        .main-header { background-color: var(--bg-header); border-bottom: 1px solid var(--theme-border-color); box-shadow: 0 2px 4px -1px rgba(0,0,0,0.06), 0 1px 2px -1px rgba(0,0,0,0.06); }
        .logo { font-size: 2.25rem; font-weight: 800; color: var(--theme-primary); letter-spacing: -0.5px; text-decoration: none; }
        .search-bar-wrapper { background-color: #FFFFFF; border-radius: 0.5rem; padding: 0.25rem; border: 1px solid var(--theme-border-color); position: relative; }
        .search-bar-wrapper input { background-color: transparent; border: none; padding: 0.625rem 0.875rem; width: 100%; color: var(--text-dark); font-weight: 500; }
        .search-bar-wrapper button { background-color: var(--theme-primary); color: var(--text-on-primary); padding: 0.625rem 1.125rem; border-radius: 0.375rem; font-size: 0.9rem; font-weight: 600; }
        .header-icon { color: var(--text-medium); font-size: 1.25rem; padding: 0.6rem; border-radius: 0.375rem; }
        .header-icon .cart-count { background-color: var(--theme-primary); color: var(--text-on-primary); height: 20px; width: 20px; font-size: 0.7rem; border: 2px solid var(--bg-header); }
        
        .page-wrapper { display: flex; flex-direction: row; } 
        
        .vertical-nav-bar {
            width: 270px; background-color: var(--sidebar-bg); border-right: 1px solid var(--sidebar-border); 
            padding: 1.5rem 0; height: calc(100vh - 110px); 
            position: sticky; top: 110px; overflow-y: auto; flex-shrink: 0; 
            transition: transform 0.3s ease-in-out;
        }
        .main-content-area { 
            flex-grow: 1; overflow-x: hidden; min-width: 0; 
        }

        .vertical-nav-bar.mobile-nav-open {
            transform: translateX(0%) !important; 
            z-index: 100; position: fixed; top: 0; left: 0; right: auto; 
            width: 280px; height: 100vh; padding-top: 70px; 
            box-shadow: 2px 0 5px rgba(0,0,0,0.1); 
        }
        @media (max-width: 1023px) {
             .vertical-nav-bar { 
                transform: translateX(-100%); 
            } 
        }

        .vertical-nav-bar .nav-section-title { font-size: 0.8rem; font-weight: 700; color: var(--sidebar-icon); text-transform: uppercase; letter-spacing: 0.075em; padding: 0.75rem 1.75rem; margin-top: 1.25rem; }
        .vertical-nav-bar .nav-section-title:first-child { margin-top: 0; }
        .vertical-nav-bar a.vertical-nav-link { display: flex; align-items: center; padding: 0.75rem 1.75rem; font-weight: 500; text-decoration: none; color: var(--sidebar-text); margin: 0.1rem 1rem; border-radius: 0.5rem; transition: background-color 0.2s ease, color 0.2s ease, transform 0.1s ease; font-size: 0.9rem; position: relative; }
        .vertical-nav-bar a.vertical-nav-link::before { content: ''; position: absolute; left: 0; right:auto; top: 50%; transform: translateY(-50%); width: 4px; height: 0%; background-color: var(--theme-primary); border-radius: 0 4px 4px 0; transition: height 0.2s ease; } 
        .vertical-nav-bar a.vertical-nav-link i { margin-right: 0.875rem; margin-left:0; width: 20px; text-align: center; color: var(--sidebar-icon); transition: color 0.2s ease; font-size: 1rem; } 
        .vertical-nav-bar a.vertical-nav-link:hover { background-color: var(--sidebar-active-bg); color: var(--sidebar-text-hover); transform: translateX(2px); } 
        .vertical-nav-bar a.vertical-nav-link:hover i { color: var(--sidebar-icon-hover); }
        .vertical-nav-bar a.vertical-nav-link:hover::before, .vertical-nav-bar a.active-category-vertical::before { height: 75%; }
        .vertical-nav-bar a.active-category-vertical { background-color: var(--sidebar-active-bg); color: var(--sidebar-text-hover); font-weight: 600; }
        .vertical-nav-bar a.active-category-vertical i { color: var(--theme-primary); }
        
        .search-results-container { position: absolute; top: 100%; left: 0; right: 0; background-color: white; border: 1px solid var(--theme-border-color); border-top: none; border-radius: 0 0 0.5rem 0.5rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 50; max-height: 300px; overflow-y: auto; }
        .search-results-container a { display: block; padding: 0.75rem 1rem; font-size: 0.9rem; color: var(--text-medium); text-decoration: none; }
        .search-results-container a:hover { background-color: var(--theme-light-gray); color: var(--text-dark); }

        .product-detail-section { padding: 2.5rem 0; }
        .product-detail-grid { display: grid; grid-template-columns: repeat(1, 1fr); gap: 2.5rem; }
        @media (min-width: 1024px) { .product-detail-grid { grid-template-columns: minmax(0, 5fr) minmax(0, 7fr); } } 
        .product-media-column { display: flex; flex-direction: column; gap: 1.25rem; }
        #product-detail-main-display { 
            width: 100%; min-height: 400px; height: 500px; 
            background-color: var(--theme-light-gray); 
            border-radius: 0.75rem; border: 1px solid var(--theme-border-color); 
            position: relative; /* Needed for positioning icons */
            overflow: hidden; display: flex; align-items: center; justify-content: center; 
            box-shadow: 0 4px 12px rgba(0,0,0,0.05); 
        }
        #product-detail-main-display img { max-width: 100%; max-height: 100%; object-fit: contain; border-radius: 0.75rem; }
        #product-detail-main-display canvas { display: block; border-radius: 0.75rem; }
        .product-thumbnail-gallery { display: flex; gap: 0.75rem; overflow-x: auto; padding-bottom: 0.5rem; }
        .thumbnail-item { width: 75px; height: 75px; border: 2px solid var(--theme-border-color); border-radius: 0.5rem; cursor: pointer; overflow: hidden; transition: border-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease; flex-shrink: 0; }
        .thumbnail-item img, .thumbnail-item .thumbnail-3d-icon { width: 100%; height: 100%; object-fit: cover; }
        .thumbnail-item .thumbnail-3d-icon { display: flex; align-items: center; justify-content: center; background-color: var(--theme-light-gray); color: var(--theme-primary); font-size: 1.8rem; }
        .thumbnail-item:hover { border-color: var(--theme-primary); transform: scale(1.05); box-shadow: 0 0 8px rgba(220, 38, 38, 0.3); }
        .thumbnail-item.active-thumbnail { border-color: var(--theme-primary); box-shadow: 0 0 0 3px var(--theme-primary); }
        .product-detail-info { background-color: var(--bg-card); padding: 2rem; border-radius: 0.75rem; }
        .product-detail-title { font-size: 2rem; font-weight: 700; color: var(--text-dark); margin-bottom: 0.75rem; line-height: 1.25; }
        .product-detail-short-desc { font-size: 1rem; color: var(--text-medium); margin-bottom: 1.5rem; line-height: 1.65; }
        .product-detail-price { font-size: 2.25rem; font-weight: 800; color: var(--text-dark); margin-bottom: 0.25rem; }
        .product-detail-price .original-price { font-size: 1.125rem; color: var(--text-light); text-decoration: line-through; margin-right: 0.75rem; } 
        .product-availability { font-size: 0.9rem; margin-bottom: 1.5rem; font-weight: 500; }
        .availability-in-stock { color: #10B981; } 
        .availability-out-of-stock { color: #EF4444; } 
        .product-quantity-selector { display: flex; align-items: center; margin-bottom: 1.75rem; }
        .product-quantity-selector input[type="number"] { width: 65px; padding: 0.5rem; text-align: center; border: 1px solid var(--theme-border-color); background-color: #FFFFFF; color: var(--text-dark); border-radius: 0.375rem; margin: 0 0.5rem; -moz-appearance: textfield; }
        .quantity-btn { background-color: var(--theme-light-gray); color: var(--text-dark); border: 1px solid var(--theme-border-color); width: 36px; height: 36px; display: flex; align-items: center; justify-content: center; border-radius: 0.375rem; cursor: pointer; }
        .product-actions .btn-main-action { background-color: var(--theme-primary); color: var(--text-on-primary); font-weight: 600; padding: 0.875rem 1.75rem; font-size: 1rem; border: 1px solid var(--theme-primary); text-transform: uppercase; letter-spacing: 0.03em; border-radius: 0.5rem; box-shadow: 0 2px 4px rgba(220, 38, 38, 0.2); }
        .product-actions .btn-main-action:hover { background-color: var(--theme-primary-hover); border-color: var(--theme-primary-hover); box-shadow: 0 4px 8px rgba(220, 38, 38, 0.25);transform: translateY(-1px); }
        .product-actions .btn-secondary-action { background-color: transparent; color: var(--theme-primary); font-weight: 600; padding: 0.875rem 1.75rem; font-size: 1rem; border: 1px solid var(--theme-primary); text-transform: uppercase; letter-spacing: 0.03em; border-radius: 0.5rem; }
        .product-tabs { margin-top: 3rem; border-top: 1px solid var(--theme-border-color); padding-top: 2rem;}
        .product-tabs nav button { padding: 0.75rem 1.5rem; font-weight: 500; color: var(--text-light); border: none; background: none; border-bottom: 3px solid transparent; margin-bottom: -1px; font-size: 0.95rem;}
        .product-tabs nav button.active-tab { color: var(--theme-primary); border-bottom-color: var(--theme-primary); font-weight: 600; }
        .product-tab-content { display: none; padding: 1.25rem 0; line-height: 1.7; color: var(--text-medium); font-size: 0.95rem;}
        .product-tab-content.active-tab-content { display: block; }
        .accessories-section { margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid var(--theme-border-color); }
        .accessories-title { font-size: 1.35rem; font-weight: 700; color: var(--text-dark); margin-bottom: 1.25rem; }
        .accessory-item-container { padding: 0.875rem 0; border-bottom: 1px solid var(--theme-border-color); }
        .form-checkbox { appearance: none; padding: 0; print-color-adjust: exact; display: inline-block; vertical-align: middle; background-origin: border-box; user-select: none; flex-shrink: 0; height: 1.125rem; width: 1.125rem; color: var(--theme-primary); background-color: #fff; border-color: var(--theme-secondary); border-width: 1px; border-radius: 0.25rem; }
        .form-checkbox:checked { border-color: transparent; background-color: currentColor; background-size: 100% 100%; background-position: center; background-repeat: no-repeat; background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e"); }
        .loader-container { width: 60px; height: 60px; position: relative; }
        .loader-outter, .loader-inner { position: absolute; border: 3px solid var(--theme-primary); border-radius: 50%; left: 50%; top: 50%; transform: translate(-50%, -50%); }
        .loader-outter { width: 100%; height: 100%; border-left-color: transparent; animation: rotate 1s cubic-bezier(0.15, 0.61, 0.58, 0.4) infinite; }
        .loader-inner { width: 50%; height: 50%; border-top-color: transparent; animation: rotate-reverse 1s cubic-bezier(0.15, 0.61, 0.58, 0.4) infinite; }
        @keyframes rotate { 100% { transform: translate(-50%, -50%) rotate(360deg); } }
        @keyframes rotate-reverse { 100% { transform: translate(-50%, -50%) rotate(-360deg); } }
        .btn-3d-animate { background-color: var(--theme-accent); color: var(--text-dark); font-weight: 600; padding: 0.5rem 1rem; border-radius: 0.375rem; border: 1px solid var(--theme-accent); }
        .appliance-control-icon {
            background-color: rgba(255, 255, 255, 0.8);
            color: var(--theme-primary);
            padding: 0.6rem;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.2s, color 0.2s;
        }
        .appliance-control-icon:hover {
            background-color: var(--theme-primary);
            color: white;
        }
        .appliance-control-icon i { font-size: 1.1rem; }


        /* Category Page Specific Styles */
        .category-header { background-color: var(--theme-light-gray); padding: 2rem 0; border-bottom: 1px solid var(--theme-border-color); }
        .category-title { font-size: 2.5rem; font-weight: 700; color: var(--text-dark); margin-bottom: 0.5rem; }
        .category-description { font-size: 1rem; color: var(--text-medium); max-width: 700px; margin-left: auto; margin-right: auto; text-align: center; line-height: 1.65; }
        .product-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1.75rem; }
        .product-card { background-color: var(--bg-card); border-radius: 0.75rem; border: 1px solid var(--theme-border-color); overflow: hidden; transition: box-shadow 0.3s ease, transform 0.3s ease; display: flex; flex-direction: column; text-decoration: none; }
        .product-card:hover { box-shadow: 0 10px 20px rgba(0,0,0,0.08), 0 3px 6px rgba(0,0,0,0.05); transform: translateY(-5px); }
        .product-card-image-container { height: 240px; background-color: #f8f9fa; display: flex; align-items: center; justify-content: center; overflow: hidden; position: relative; }
        .product-card-image { width: 100%; height: 100%; object-fit: contain; transition: transform 0.3s ease; }
        .product-card:hover .product-card-image { transform: scale(1.05); }
        .product-card-content { padding: 1.25rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; }
        .product-card-title { font-size: 1.1rem; font-weight: 600; color: var(--text-dark); margin-bottom: 0.5rem; line-height: 1.4; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; min-height: calc(1.1rem * 1.4 * 2); }
        .product-card-sku { font-size: 0.75rem; color: var(--text-light); margin-bottom: 0.75rem; text-transform: uppercase; letter-spacing: 0.05em; }
        .product-card-price { font-size: 1.375rem; font-weight: 700; color: var(--theme-primary); margin-bottom: 1rem; }
        .btn-product-card { background-color: var(--theme-primary); color: var(--text-on-primary); padding: 0.75rem 1.25rem; border-radius: 0.5rem; font-weight: 600; text-align: center; display: block; width: 100%; transition: background-color 0.2s ease, transform 0.1s ease; font-size: 0.9rem; margin-top: auto; border: none; }
        .btn-product-card:hover { background-color: var(--theme-primary-hover); transform: translateY(-1px); }
        .noUi-target { background: #E5E7EB; border-radius: 4px; border: 1px solid #D1D5DB; box-shadow: none; }
        .noUi-connect { background: var(--theme-primary); }
        .noUi-handle { border: 2px solid var(--bg-card); border-radius: 50%; background: var(--theme-primary-hover); box-shadow: 0 1px 3px rgba(0,0,0,0.1); cursor: grab; }
        .noUi-handle:focus { outline: none; box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.3); }
        .noUi-horizontal { height: 8px; }
        .noUi-horizontal .noUi-handle { width: 20px; height: 20px; right: -10px; top: -7px; } 
        #applyPriceFilterBtn { background-color: var(--theme-accent); color: var(--text-dark); }
        .breadcrumb-link:hover { color: var(--theme-primary); text-decoration: underline; }

        /* Footer Styles */
        .main-footer { background-color: var(--bg-footer); color: var(--text-footer); padding: 3.5rem 1rem; margin-top: auto; }
        .main-footer h5 { color: #FFFFFF; font-size: 1.1rem; font-weight: 600; margin-bottom: 1.25rem; }
        .main-footer a { color: var(--text-footer); text-decoration: none; transition: color 0.2s ease; font-size: 0.9rem; }
        .main-footer a:hover { color: var(--theme-primary); }
        .footer-bottom { border-top: 1px solid #4B5563; padding-top: 1.75rem; margin-top: 2.5rem; font-size: 0.85rem; }
        .footer-social-icons a { font-size: 1.35rem; }


        /* Responsive adjustments */
        @media (max-width: 1023px) {
             .vertical-nav-bar { 
                position: fixed; top: 0; left: 0; right:auto; 
                transform: translateX(-100%); 
                height: 100vh; z-index: 100; padding-top: 60px; 
                box-shadow: 2px 0 5px rgba(0,0,0,0.1); 
            } 
            .main-header .lg\:hidden.header-icon { display: inline-flex !important; align-items: center; justify-content:center; }
            .product-detail-grid { grid-template-columns: 1fr; } 
            #product-detail-main-display { height: 350px; min-height: 300px;}
            .product-detail-title { font-size: 1.6rem; }
            .product-detail-price { font-size: 1.85rem; }
            .category-title { font-size: 2rem; }
            .mobile-menu-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.5); z-index: 99; display: none; }
            .mobile-nav-active .mobile-menu-overlay { display: block; }
        }
        @media (min-width: 1024px) {
            .main-header .lg\:hidden.header-icon { display: none !important; }
        }
    </style>
</head>

<body class="min-h-screen flex flex-col">
    <div id="mobileMenuOverlay" class="mobile-menu-overlay"></div>

    <div class="top-bar">
        <div class="container mx-auto px-4 flex flex-wrap justify-between items-center">
            <div class="flex space-x-4 mb-2 sm:mb-0"> <a href="#">Chi Siamo</a>
                <a href="#">Contatti</a>
                <a href="#"><i class="fas fa-headset mr-1"></i> Supporto: +39 0123 456789</a> </div>
            <div class="flex items-center space-x-3"> <a href="#"><i class="fas fa-globe mr-1"></i> Italiano</a> <a href="#"><i class="fas fa-euro-sign mr-1"></i> EUR</a> </div>
        </div>
    </div>

    <header class="main-header py-3 sticky top-0 z-50">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <a href="?page=category&slug=promozioni" class="logo">MOHCEN MIGO</a>
            <div class="search-bar-wrapper flex-grow max-w-xl mx-4 hidden lg:flex items-center">
                <input type="text" id="searchInputDesktop" placeholder="Cerca codice prodotto, nome..." autocomplete="off">
                <button type="submit" aria-label="Cerca"><i class="fas fa-search"></i></button>
                <div id="searchResultsDesktop" class="search-results-container hidden"></div>
            </div>
            <div class="flex items-center space-x-1 sm:space-x-2"> <a href="#" class="header-icon hidden sm:inline-flex items-center justify-center" aria-label="Il Mio Account"><i class="fas fa-user"></i></a>
                <a href="#" class="header-icon hidden sm:inline-flex items-center justify-center" aria-label="Preferiti"><i class="far fa-heart"></i></a>
                <a href="#" class="header-icon inline-flex items-center justify-center relative" aria-label="Carrello">
                    <i class="fas fa-shopping-cart"></i>
                    <span class="cart-count absolute -top-1.5 -right-1.5 flex items-center justify-center rounded-full">3</span> </a>
                <button class="lg:hidden header-icon inline-flex items-center justify-center" aria-label="Menu" id="mobileMenuButton">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </div>
        <div class="container mx-auto px-4 mt-2 lg:hidden">
            <div class="search-bar-wrapper w-full flex items-center">
                <input type="text" id="searchInputMobile" placeholder="Cerca prodotti..." autocomplete="off">
                <button type="submit" aria-label="Cerca"><i class="fas fa-search"></i></button>
                <div id="searchResultsMobile" class="search-results-container hidden"></div>
            </div>
        </div>
    </header>

    <div class="page-wrapper container mx-auto px-4 flex-grow">
        <aside class="vertical-nav-bar lg:block"> 
            <div class="nav-section-title">Tipo di Attività</div>
            <div id="tipoAttivitaSidebar">
                <p class="text-xs text-gray-400 px-6 py-2">Caricamento...</p>
            </div>

            <div class="nav-section-title mt-4">Categorie Principali</div>
            <div id="categoriePrincipaliSidebar">
                <p class="text-xs text-gray-400 px-6 py-2">Caricamento...</p>
            </div>
            
            <div id="priceFilterSection" class="hidden">
                <div class="nav-section-title mt-6 mb-3">Filtra per Prezzo</div>
                <div class="px-5 mb-6">
                    <div id="price-slider" class="mb-3"></div>
                    <div class="flex justify-between items-center text-xs text-gray-300 font-medium">
                        <span id="price-lower-value">€0</span>
                        <span id="price-upper-value">€1000</span>
                    </div>
                    <button id="applyPriceFilterBtn" class="mt-4 w-full text-sm font-medium py-2 px-4 rounded-md transition duration-150 ease-in-out">
                        Applica
                    </button>
                </div>
            </div>
            <a href="?page=category&slug=promozioni" class="promo-link mt-4 vertical-nav-link"><i class="fas fa-tags"></i> Promozioni</a>
        </aside>

        <main class="main-content-area py-6 lg:py-8 lg:pl-8"> 
            <div id="categoryPageContent" class="hidden">
                <nav class="text-sm mb-6 py-3 px-0" aria-label="Breadcrumb">
                    <ol class="list-none p-0 inline-flex space-x-2 items-center text-gray-500"> <li>
                            <a href="?page=category&slug=promozioni" class="breadcrumb-link">
                                <i class="fas fa-home mr-1"></i>Homepage </a>
                        </li>
                        <li><span class="mx-2">/</span></li> <li aria-current="page">
                            <span class="font-medium text-gray-700" id="breadcrumbCategoryName">Caricamento...</span>
                        </li>
                    </ol>
                </nav>
                <div class="category-header mb-8">
                    <div class="container mx-auto px-0 text-center">
                        <h1 class="category-title" id="categoryPageTitle">Caricamento Categoria...</h1>
                        <p class="category-description" id="categoryPageDescription"></p>
                    </div>
                </div>
                <div class="mb-6 flex flex-col sm:flex-row justify-between items-center gap-4">
                    <div class="text-sm text-gray-600">
                        <span id="productCount" class="font-semibold">0</span> Prodotti Trovati
                    </div>
                    <div>
                        <label for="sortOrder" class="mr-2 text-sm text-gray-700">Ordina Per:</label> <select id="sortOrder" name="sortOrder" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-red-500 focus:border-red-500 shadow-sm">
                            <option value="relevance">Rilevanza</option>
                            <option value="price_asc">Prezzo: Crescente</option>
                            <option value="price_desc">Prezzo: Decrescente</option>
                            <option value="name_asc">Nome: A-Z</option>
                        </select>
                    </div>
                </div>
                <div id="productsStatusMessageContainer" class="text-center text-gray-500 col-span-full py-10" style="display: block;">
                     <p id="loadingProductsMessage">Caricamento prodotti...</p>
                </div>
                <div class="product-grid" id="productGridContainer">
                    </div>
                <div class="mt-10 flex justify-center" id="paginationContainer" style="display: none;">
                    </div>
            </div>

            <div id="productDetailPageContent" class="hidden">
                <section class="product-detail-section">
                    <div class="container mx-auto px-0">
                        <div class="product-detail-grid">
                            <div class="product-media-column">
                                <div id="product-detail-main-display">
                                    <div class="loader-container" id="modelLoadingIndicator">
                                        <div class="loader-outter"></div>
                                        <div class="loader-inner"></div>
                                    </div>
                                    <div id="applianceControlsContainer" class="absolute top-4 right-4 space-y-2 z-10 hidden">
                                        <button id="ovenDoorBtn" class="appliance-control-icon" title="Apri/Chiudi Porta Forno">
                                            <i class="fas fa-door-closed"></i>
                                        </button>
                                        <button id="ovenTrayBtn" class="appliance-control-icon" title="Muovi Platò Forno">
                                            <i class="fas fa-minus"></i> </button>
                                    </div>
                                </div>
                                <div class="mt-2 text-center">
                                    <button id="toggleAnimationBtn" class="btn-3d-animate">
                                        <i class="fas fa-play"></i> Animazione </button>
                                </div>
                                <div class="product-thumbnail-gallery">
                                    <div class="thumbnail-item active-thumbnail" data-type="3d" aria-label="Visualizza modello 3D">
                                        <div class="thumbnail-3d-icon"><i class="fas fa-cube"></i></div>
                                    </div>
                                </div>
                                <section class="accessories-section mt-6">
                                    <h3 class="accessories-title">Accessori Disponibili</h3>
                                    <div class="space-y-0" id="productAccessoriesContainer"> 
                                        <p class="text-sm text-gray-500 px-1">Caricamento accessori...</p>
                                    </div>
                                </section>
                            </div>
                            <div class="product-detail-info">
                                <span class="text-xs font-semibold uppercase tracking-wider text-red-600 bg-red-100 py-1 px-3 rounded-full mb-3 inline-block" id="productTag">MODELLO DI PUNTA</span>
                                <h1 class="product-detail-title">Nome Prodotto Caricato da API</h1>
                                <p class="product-detail-short-desc">Descrizione breve del prodotto caricata da API...</p>
                                <div class="product-detail-price mb-1">
                                    €0.00
                                    <span class="original-price">€0.00</span>
                                </div>
                                 <p class="text-xs text-gray-500 mb-3">(Prezzo IVA Esclusa)</p>
                                <div class="product-availability mb-4"></div>
                                <div class="my-4 p-3.5 border border-gray-200 rounded-lg bg-gray-50 text-sm space-y-2">
                                    <div class="flex items-center">
                                        <img src="https://www.paypalobjects.com/webstatic/mktg/logo/AM_SbyPP_H_H_rgb_default.png" alt="PayPal Logo" class="h-5 mr-2.5"> <span>Paga in 3 rate da <strong>€ --.--</strong> senza interessi. <a href="#" class="text-red-600 hover:underline font-medium">Scopri di più</a></span>
                                    </div>
                                    <div class="flex items-center">
                                         <img src="https://placehold.co/60x20/CCCCCC/4A5568?text=AlmaPay" alt="Alma Logo" class="h-5 mr-2.5 border rounded-sm"> <span>Paga in 2x, 3x o 4x. Oggi paghi <strong>€ --.--</strong> poi rate mensili senza interessi.</span>
                                    </div>
                                </div>
                                <div class="product-quantity-selector">
                                    <label for="quantity" class="text-sm">Quantità:</label>
                                    <button class="quantity-btn" onclick="updateQuantity(-1)" aria-label="Diminuisci quantità">-</button>
                                    <input type="number" id="quantity" name="quantity" value="1" min="1" class="text-center" aria-labelledby="quantity">
                                    <button class="quantity-btn" onclick="updateQuantity(1)" aria-label="Aumenta quantità">+</button>
                                </div>
                                <div class="product-actions flex flex-col sm:flex-row gap-3 mt-6">
                                    <button class="btn-main-action flex-grow rounded-md w-full sm:w-auto" data-product-id="main_product"><i class="fas fa-cart-plus mr-2"></i> Aggiungi al Carrello</button> <button class="btn-secondary-action flex-grow rounded-md w-full sm:w-auto"><i class="fas fa-file-alt mr-2"></i> Aggiungi al Preventivo</button> </div>
                                <div class="mt-6 text-xs text-gray-500 space-y-1.5">
                                    <p><i class="fas fa-truck mr-1.5"></i> Consegna indicativa: 2-7 giorni lavorativi.</p> <p><a href="#" class="text-red-600 hover:text-red-500 font-medium"><i class="fas fa-share-alt mr-1.5"></i> Invia ad un amico</a></p> <p><a href="#" class="text-red-600 hover:text-red-500 font-medium"><i class="fas fa-info-circle mr-1.5"></i> Richiesta informazioni</a></p> </div>
                            </div>
                        </div>
                        <div class="product-tabs mt-10">
                            <nav class="flex space-x-1 border-b border-gray-300 -mb-px"> <button class="product-tab-button active-tab" data-tab="description">Descrizione</button>
                                <button class="product-tab-button" data-tab="specs">Specifiche Tecniche</button>
                                <button class="product-tab-button" data-tab="reviews">Recensioni</button>
                            </nav>
                            <div id="description" class="product-tab-content active-tab-content">
                                <p>Descrizione dettagliata del prodotto caricata dinamicamente...</p>
                            </div>
                            <div id="specs" class="product-tab-content">
                                <p>Specifiche tecniche caricate dinamicamente...</p>
                            </div>
                            <div id="reviews" class="product-tab-content">
                                <p>Ancora nessuna recensione per questo prodotto.</p>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </main>
        
    </div>

    <footer class="main-footer">
        <div class="container mx-auto px-4">
            <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                <div>
                    <h5 class="font-bold text-lg mb-3 text-white">MOHCEN MIGO</h5>
                    <p class="text-sm leading-relaxed">Pionieri nelle tecnologie per la ristorazione del futuro. Equipaggiamo la tua visione.</p>
                     <div class="mt-4">
                        <h6 class="font-semibold text-gray-200 mb-1">Contattaci:</h6>
                        <p class="text-sm">Telefono: <a href="tel:+390123456789" class="hover:text-red-400">+39 0123 456789</a></p>
                        <p class="text-sm">Email: <a href="mailto:info@nexusequip.com" class="hover:text-red-400">info@nexusequip.com</a></p>
                        <p class="text-sm">Indirizzo: Via Roma 123, Milano, Italia</p>
                    </div>
                </div>
                <div>
                    <h5 class="font-bold text-lg mb-3 text-white">Esplora</h5>
                    <ul class="space-y-2">
                        <li><a href="?page=category&slug=promozioni">Promozioni</a></li> <li><a href="?page=category&slug=arredo-acciaio">Arredo Acciaio</a></li> <li><a href="#">La Nostra Visione</a></li>
                        <li><a href="#">Catalogo Tecnologie</a></li>
                    </ul>
                </div>
                <div>
                    <h5 class="font-bold text-lg mb-3 text-white">Supporto</h5>
                    <ul class="space-y-2">
                        <li><a href="#">Portale Assistenza</a></li>
                        <li><a href="#">FAQ</a></li>
                        <li><a href="#">Garanzie</a></li>
                    </ul>
                </div>
                <div>
                    <h5 class="font-bold text-lg mb-3 text-white">Seguici</h5>
                    <div class="flex space-x-3 footer-social-icons"> 
                        <a href="#" aria-label="Facebook" class="hover:text-red-400"><i class="fab fa-facebook-f"></i></a>
                        <a href="#" aria-label="Instagram" class="hover:text-red-400"><i class="fab fa-instagram"></i></a>
                        <a href="#" aria-label="LinkedIn" class="hover:text-red-400"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" aria-label="YouTube" class="hover:text-red-400"><i class="fab fa-youtube"></i></a>
                    </div>
                    <h5 class="font-bold text-lg mt-6 mb-3 text-white">Newsletter</h5>
                    <p class="text-sm mb-3">Iscriviti per aggiornamenti e offerte.</p>
                    <form class="flex mb-3">
                        <input type="email" placeholder="La tua email..." class="p-2.5 text-sm rounded-l-md border-0 bg-gray-700 text-gray-300 focus:outline-none focus:ring-1 focus:ring-red-500 flex-grow placeholder-gray-400"> 
                        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white p-2.5 px-4 rounded-r-md text-sm font-semibold">Iscriviti</button> 
                    </form>
                </div>
            </div>
            <div class="footer-bottom text-center">
                <p>&copy; <span id="currentYear"></span> MOHCEN MIGO. Tutti i diritti riservati.</p>
            </div>
        </div>
    </footer>

    <script>
        // --- المتغيرات العالمية وإعدادات API ---
        const API_BASE_URL = 'http://127.0.0.1:8000/api';
        let globalMockFetchedCategories = []; 
        let globalMockFetchedProducts = []; 
        let currentProductDataGlobal = null; 
        let testProductIdGlobal = 8; // <<<<<<<  غيّر هذا الرقم لتجربة منتجات مختلفة (7=ثلاجة, 8=فرن, 9=خلاط, 10=غسالة)
        
        // متغيرات Three.js
        let scene, camera, renderer, controls, modelGroup;
        let doorLeftPivot, doorRightPivot; // للثلاجة
        let ovenDoorPivot, ovenTrayMesh; // للفرن
        let mixer, clock, openAction, closeAction; // للرسوم المتحركة GLTF/الثلاجة الافتراضية
        let isModelOpen = false; // حالة عامة، قد تحتاج إلى تحديد لكل جزء متحرك
        let defaultCameraPosition = new THREE.Vector3(2.5, 1.5, 3.5); 
        let threeJsCanvas = null;
        let threeJsInitialized = false;
        let animationFrameId = null;
        let productMainDisplayElement, modelLoadingIndicatorElement, toggleAnimationBtnElement;
        let applianceControlsContainerElement, ovenDoorBtnElement, ovenTrayBtnElement; // عناصر تحكم الأجهزة
        let loadedGLTFModelGroup = null; 

        // حالات خاصة بالفرن
        let isOvenDoorOpen = false;
        let isOvenTrayOut = false;
        
        // متغيرات خاصة بصفحة الفئة
        let categoryPriceSliderInstance = null;
        let categoryOriginalProductList = [];
        let categoryCurrentProductList = [];


        // --- دوال مشتركة ---
        function setupMobileMenu() {
            const mobileMenuButton = document.getElementById('mobileMenuButton');
            const verticalNavBar = document.querySelector('.vertical-nav-bar');
            const pageWrapper = document.querySelector('.page-wrapper');
            const mobileMenuOverlay = document.getElementById('mobileMenuOverlay');

            if (mobileMenuButton && verticalNavBar && pageWrapper && mobileMenuOverlay) {
                mobileMenuButton.addEventListener('click', () => {
                    verticalNavBar.classList.toggle('mobile-nav-open');
                    pageWrapper.classList.toggle('mobile-nav-active');
                    const icon = mobileMenuButton.querySelector('i');
                    if (verticalNavBar.classList.contains('mobile-nav-open')) {
                        icon.classList.remove('fa-bars');
                        icon.classList.add('fa-times');
                        mobileMenuOverlay.style.display = 'block';
                        document.body.style.overflow = 'hidden';
                    } else {
                        icon.classList.remove('fa-times');
                        icon.classList.add('fa-bars');
                        mobileMenuOverlay.style.display = 'none';
                        document.body.style.overflow = '';
                    }
                });
                mobileMenuOverlay.addEventListener('click', () => { 
                    verticalNavBar.classList.remove('mobile-nav-open');
                    pageWrapper.classList.remove('mobile-nav-active');
                    mobileMenuOverlay.style.display = 'none';
                    document.body.style.overflow = '';
                    const icon = mobileMenuButton.querySelector('i');
                    icon.classList.remove('fa-times');
                    icon.classList.add('fa-bars');
                });
                verticalNavBar.querySelectorAll('a').forEach(link => {
                    link.addEventListener('click', () => {
                        if (verticalNavBar.classList.contains('mobile-nav-open')) {
                           verticalNavBar.classList.remove('mobile-nav-open');
                           pageWrapper.classList.remove('mobile-nav-active');
                           mobileMenuOverlay.style.display = 'none';
                           document.body.style.overflow = '';
                           const icon = mobileMenuButton.querySelector('i');
                           icon.classList.remove('fa-times');
                           icon.classList.add('fa-bars');
                        }
                    });
                });
            }
        }

        function setupGlobalSearch() {
            const searchInputDesktop = document.getElementById('searchInputDesktop');
            const searchResultsDesktop = document.getElementById('searchResultsDesktop');
            const searchInputMobile = document.getElementById('searchInputMobile');
            const searchResultsMobile = document.getElementById('searchResultsMobile');

            function handleSearchInput(event, resultsContainer) {
                const searchTerm = event.target.value.toLowerCase();
                resultsContainer.innerHTML = '';
                if (searchTerm.length === 0) {
                    resultsContainer.classList.add('hidden');
                    return;
                }
                const filteredItems = globalMockFetchedProducts.filter(item =>
                    item.name_it && item.name_it.toLowerCase().includes(searchTerm) 
                );

                if (filteredItems.length > 0) {
                    filteredItems.forEach(item => {
                        const link = document.createElement('a');
                        link.href = `?page=product&id=${item.id}`; 
                        link.textContent = item.name_it;
                        resultsContainer.appendChild(link);
                    });
                    resultsContainer.classList.remove('hidden');
                } else {
                    const noResultsItem = document.createElement('div');
                    noResultsItem.className = 'px-4 py-2 text-sm text-gray-500';
                    noResultsItem.textContent = 'Nessun prodotto trovato.'; 
                    resultsContainer.appendChild(noResultsItem);
                    resultsContainer.classList.remove('hidden');
                }
            }
            function hideSearchResultsOnClickOutside(inputElement, resultsContainer) {
                 document.addEventListener('click', function(event) {
                    const isClickInsideInput = inputElement.contains(event.target);
                    const isClickInsideResults = resultsContainer.contains(event.target);
                    if (!isClickInsideInput && !isClickInsideResults) {
                        resultsContainer.classList.add('hidden');
                    }
                });
            }

            if (searchInputDesktop && searchResultsDesktop) {
                searchInputDesktop.addEventListener('input', (e) => handleSearchInput(e, searchResultsDesktop));
                searchInputDesktop.addEventListener('focus', (e) => { if(e.target.value.length > 0 && globalMockFetchedProducts.length > 0) searchResultsDesktop.classList.remove('hidden'); });
                hideSearchResultsOnClickOutside(searchInputDesktop, searchResultsDesktop);
            }
            if (searchInputMobile && searchResultsMobile) {
                searchInputMobile.addEventListener('input', (e) => handleSearchInput(e, searchResultsMobile));
                searchInputMobile.addEventListener('focus', (e) => { if(e.target.value.length > 0 && globalMockFetchedProducts.length > 0) searchResultsMobile.classList.remove('hidden'); });
                hideSearchResultsOnClickOutside(searchInputMobile, searchResultsMobile);
            }
        }
        
        async function loadGlobalCategoriesAndInitialProducts() {
            const sidebarActivityContainer = document.getElementById('tipoAttivitaSidebar');
            const sidebarMainCatContainer = document.getElementById('categoriePrincipaliSidebar');

            try {
                const response = await fetch(`${API_BASE_URL}/categories/?is_active=true&ordering=name_it`);
                if (!response.ok) throw new Error(`API error for categories: ${response.status}`);
                const apiResult = await response.json();
                const categories = apiResult.results || apiResult;
                globalMockFetchedCategories = categories;

                sidebarActivityContainer.innerHTML = '';
                sidebarMainCatContainer.innerHTML = '';

                if (!categories || categories.length === 0) {
                    sidebarActivityContainer.innerHTML = '<p class="text-xs text-gray-400 px-6 py-2">Nessun tipo trovato.</p>';
                    sidebarMainCatContainer.innerHTML = '<p class="text-xs text-gray-400 px-6 py-2">Nessuna categoria trovata.</p>';
                } else {
                    const urlParams = new URLSearchParams(window.location.search);
                    const currentPage = urlParams.get('page');
                    const currentSlug = urlParams.get('slug');
                    categories.forEach(category => {
                        if (!category.name_it || !category.slug) return;
                        const link = document.createElement('a');
                        link.href = `?page=category&slug=${category.slug}`;
                        link.className = `vertical-nav-link flex items-center px-6 py-2.5 text-sm font-medium rounded-md mx-2 my-0.5 transition-colors duration-150 ease-in-out text-sidebar-text hover:bg-sidebar-active-bg hover:text-sidebar-text-hover`;
                        if (currentPage === 'category' && currentSlug === category.slug) {
                            link.classList.add('active-category-vertical');
                        }
                        const iconClass = category.icon_class || 'fa-tag';
                        link.innerHTML = `<i class="fas ${iconClass} w-5 h-5 mr-3"></i> ${category.name_it}`; 
                        if (category.category_group === 'activity') sidebarActivityContainer.appendChild(link);
                        else if (category.category_group === 'main_cat') sidebarMainCatContainer.appendChild(link);
                    });
                }
            } catch (error) {
                console.error("Error loading global categories:", error);
            }

            try {
                const productsResponse = await fetch(`${API_BASE_URL}/products/?is_active=true&limit=50`); 
                if (productsResponse.ok) {
                    const productsData = await productsResponse.json();
                    const products = productsData.results || productsData;
                    products.forEach(p => addProductToGlobalSearchList(p));
                }
            } catch (error) {
                console.warn("Could not fetch initial products for search:", error);
            }
        }

        function addProductToGlobalSearchList(product) {
            if (product && product.id && product.name_it) {
                if (!globalMockFetchedProducts.find(p => p.id === product.id)) {
                    globalMockFetchedProducts.push({ id: product.id, name_it: product.name_it, slug: product.slug });
                }
            }
        }


        // --- دوال خاصة بصفحة تفاصيل المنتج ---
        function updateQuantity(change) {
            const quantityInput = document.getElementById('quantity');
            if (quantityInput) {
                let currentValue = parseInt(quantityInput.value);
                currentValue += change;
                if (currentValue < 1) currentValue = 1;
                quantityInput.value = currentValue;
            }
        }
        function updateProductPageDOM(data) {
            document.querySelector('#productDetailPageContent .product-detail-title').textContent = data.name_it || "Nome Prodotto Indisponibile";
            const priceEl = document.querySelector('#productDetailPageContent .product-detail-price');
            priceEl.innerHTML = `€${parseFloat(data.price || 0).toFixed(2)} ${data.original_price && parseFloat(data.original_price) > parseFloat(data.price || 0) ? `<span class="original-price">€${parseFloat(data.original_price).toFixed(2)}</span>` : ''}`;
            document.querySelector('#productDetailPageContent .product-detail-short-desc').textContent = data.short_description_it || "Descrizione breve non disponibile.";
            const availabilityEl = document.querySelector('#productDetailPageContent .product-availability');
            if (data.availability) {
                const availabilityLower = String(data.availability).toLowerCase();
                if (availabilityLower === 'in_stock' || availabilityLower === 'متوفر') availabilityEl.innerHTML = `<span class="availability-in-stock"><i class="fas fa-check-circle mr-1"></i> Disponibilità Immediata</span>`;
                else if (availabilityLower === 'pre_order' || availabilityLower === 'طلب مسبق') availabilityEl.innerHTML = `<span class="text-yellow-600"><i class="fas fa-clock mr-1"></i> Su Ordinazione</span>`;
                else availabilityEl.innerHTML = `<span class="availability-out-of-stock"><i class="fas fa-times-circle mr-1"></i> Non Disponibile</span>`;
            } else {
                availabilityEl.innerHTML = `<span class="text-gray-500">Disponibilità non specificata</span>`;
            }

            const productThumbnailGallery = document.querySelector('#productDetailPageContent .product-thumbnail-gallery');
            const existingImageThumbs = productThumbnailGallery.querySelectorAll('.thumbnail-item[data-type="image"]');
            existingImageThumbs.forEach(thumb => thumb.remove());

            if (data.images && data.images.length > 0) {
                data.images.forEach((image, index) => { 
                    const thumbItem = document.createElement('div');
                    thumbItem.classList.add('thumbnail-item');
                    thumbItem.dataset.type = 'image';
                    thumbItem.dataset.src = image.image; 
                    thumbItem.setAttribute('aria-label', `Visualizza immagine ${index + 1}`);
                    const img = document.createElement('img');
                    img.src = image.thumbnail || image.image;
                    img.alt = `Miniatura Prodotto ${index + 1}`;
                    img.onerror = () => { img.src = `https://placehold.co/75x75/FEE2E2/B91C1C?text=Err`; }
                    thumbItem.appendChild(img);
                    productThumbnailGallery.appendChild(thumbItem); 
                });
            }
            const threeDThumb = productThumbnailGallery.querySelector('.thumbnail-item[data-type="3d"]');
            if (data.model_3d_file_url || data.model_3d_file || data.productType) { // Check productType for default models
                if(threeDThumb) { 
                    threeDThumb.style.display = 'flex'; 
                    threeDThumb.dataset.src = data.model_3d_file_url || data.model_3d_file || ''; // GLTF src
                }
            } else {
                if(threeDThumb) threeDThumb.style.display = 'none';
            }
            reinitializeProductThumbnails();

            const accessoriesContainer = document.getElementById('productAccessoriesContainer');
            accessoriesContainer.innerHTML = '';
            if (data.accessories && data.accessories.length > 0) {
                data.accessories.forEach(acc => { 
                    const accessoryHTML = `
                    <div class="accessory-item-container">
                        <div class="flex items-center gap-3">
                            <input type="checkbox" id="accessory_${acc.id}_toggle" class="form-checkbox accessory-toggle" data-accessory-mesh="${acc.mesh_name || `accessory_mesh_${acc.id}`}" aria-labelledby="accessory_${acc.id}_label">
                            <div class="accessory-gallery-trigger cursor-pointer p-1" data-gallery-target="#accessory_gallery_${acc.id}" aria-label="Mostra immagini ${acc.name_it || 'Accessorio'}" aria-expanded="false"><i class="fas fa-images text-lg text-gray-400 hover:text-red-600"></i></div>
                            <div class="w-14 h-14 flex-shrink-0 rounded bg-white overflow-hidden border border-gray-200"><img src="${acc.image_url || acc.image || 'https://placehold.co/80x80/FEE2E2/DC2626?text=Acc'}" alt="${acc.name_it || 'Accessorio'}" class="w-full h-full object-contain"></div>
                            <div class="flex-grow"><label for="accessory_${acc.id}_toggle" id="accessory_${acc.id}_label" class="font-medium text-gray-800 text-sm cursor-pointer">${acc.name_it || 'Nome Accessorio'}</label><p class="text-xs text-gray-600">€${parseFloat(acc.price || 0).toFixed(2)}</p></div>
                            <button class="bg-red-600 hover:bg-red-700 text-white text-xs font-medium py-1.5 px-3 rounded whitespace-nowrap accessory-add-btn" data-accessory-id="${acc.id}">Aggiungi</button>
                        </div>
                        <div id="accessory_gallery_${acc.id}" class="hidden mt-2 pl-12"><div class="flex space-x-2 overflow-x-auto py-1">${(acc.gallery_images || []).map(galImg => `<img src="${galImg.thumbnail || galImg.image}" alt="${acc.name_it || 'Accessorio'} Immagine" class="h-16 w-16 border border-gray-300 rounded object-cover cursor-pointer hover:border-red-500">`).join('')}</div></div>
                    </div>`; 
                    accessoriesContainer.insertAdjacentHTML('beforeend', accessoryHTML);
                });
            } else {
                accessoriesContainer.innerHTML = '<p class="text-sm text-gray-500 px-1">Nessun accessorio disponibile.</p>';
            }
            reinitializeAccessoryListeners();

            document.getElementById('description').innerHTML = data.long_description_it ? `<p>${data.long_description_it.replace(/\n/g, '</p><p>')}</p>` : "<p>Descrizione dettagliata non disponibile.</p>";
            const specsTabContent = document.getElementById('specs');
            let specsHTML = '<h4 class="font-semibold text-gray-800 mb-2.5">Dati Tecnici</h4>';
            if (data.specifications && typeof data.specifications === 'object' && Object.keys(data.specifications).length > 0) {
                specsHTML += '<div class="overflow-x-auto"><table class="w-full min-w-[450px] text-sm text-left text-gray-700"><tbody class="divide-y divide-gray-200">'; 
                for (const key in data.specifications) {
                    const formattedKey = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                    specsHTML += `<tr class="hover:bg-gray-50"><td class="py-2.5 px-3 font-medium text-gray-800 w-2/5">${formattedKey}:</td><td class="py-2.5 px-3">${data.specifications[key]}</td></tr>`;
                }
                specsHTML += '</tbody></table></div>';
            } else {
                specsHTML += "<p>Specifiche tecniche non disponibili.</p>";
            }
            specsTabContent.innerHTML = specsHTML;

            // تحديث واجهة المستخدم بناءً على نوع المنتج
            updateApplianceControlsUI(data.productType);
        }

        async function fetchAndDisplayProduct(productId) {
            productMainDisplayElement = document.getElementById('product-detail-main-display');
            modelLoadingIndicatorElement = document.getElementById('modelLoadingIndicator');
            const productInfoColumn = document.querySelector('#productDetailPageContent .product-detail-info');

            if (modelLoadingIndicatorElement) modelLoadingIndicatorElement.style.display = 'flex';
            try {
                // --- محاكاة جلب بيانات المنتج ---
                // في تطبيق حقيقي، هذا سيكون طلب API: const response = await fetch(`${API_BASE_URL}/products/${productId}/`);
                // currentProductDataGlobal = await response.json();
                
                // بيانات محاكاة للمنتجات المختلفة
                if (productId == 7) { // ثلاجة (الافتراضي)
                     currentProductDataGlobal = {
                        id: 7, name_it: "Frigorifero Professionale Doppia Anta", productType: "refrigerator",
                        model_3d_file_url: null, // أو مسار لملف GLTF إذا كان متاحًا
                        price: "1250.00", original_price: "1390.00", availability: "in_stock",
                        short_description_it: "Frigorifero capiente e performante per cucine professionali.",
                        long_description_it: "Questo frigorifero offre ampio spazio e tecnologia di raffreddamento avanzata...",
                        images: [{ image: 'https://placehold.co/600x400/EBF4FF/1D4ED8?text=Frigo+1', thumbnail: 'https://placehold.co/80x80/EBF4FF/1D4ED8?text=F1' }],
                        accessories: [{id: 1, name_it: "Ripiano Extra", price: "45.00", mesh_name: "shelfAccessory"}],
                        specifications: { "Capacità": "700L", "Classe Energetica": "A++" }
                    };
                } else if (productId == 8) { // فرن
                    currentProductDataGlobal = {
                        id: 8, name_it: "Forno Elettrico Ventilato Pro", productType: "oven",
                        model_3d_file_url: null, // سيتم استخدام النموذج الافتراضي للفرن
                        price: "890.00", availability: "in_stock",
                        short_description_it: "Forno elettrico ventilato con multiple funzioni di cottura.",
                        long_description_it: "Ideale per pasticcerie e ristoranti, garantisce cotture uniformi...",
                        images: [{ image: 'https://placehold.co/600x400/FFF7ED/F97316?text=Forno+1', thumbnail: 'https://placehold.co/80x80/FFF7ED/F97316?text=O1' }],
                        accessories: [
                            {id: 101, name_it: "Griglia Standard Forno", price: "25.00", mesh_name: "ovenGrillAccessory"},
                            {id: 102, name_it: "Platò da Forno Grande", price: "35.00", mesh_name: "ovenMainTray"} // اسم الشبكة يجب أن يطابق اسم الصينية في النموذج
                        ],
                        specifications: { "Tipo": "Elettrico Ventilato", "Capacità": "90L", "Programmi": "10" }
                    };
                } else if (productId == 9) { // خلاط
                     currentProductDataGlobal = {
                        id: 9, name_it: "Frullatore Potente 1200W", productType: "blender",
                        price: "150.00", availability: "pre_order",
                        short_description_it: "Frullatore ad alta potenza per smoothie e preparazioni.",
                        images: [{ image: 'https://placehold.co/600x400/F0FDF4/16A34A?text=Blender+1', thumbnail: 'https://placehold.co/80x80/F0FDF4/16A34A?text=B1' }],
                        specifications: { "Potenza": "1200W", "Capacità Caraffa": "1.5L" }
                    };
                } else if (productId == 10) { // غسالة
                    currentProductDataGlobal = {
                        id: 10, name_it: "Lavatrice Industriale 15kg", productType: "washing_machine",
                        price: "1800.00", availability: "out_of_stock",
                        short_description_it: "Lavatrice robusta per lavanderie industriali.",
                         images: [{ image: 'https://placehold.co/600x400/EFF6FF/3B82F6?text=Washer+1', thumbnail: 'https://placehold.co/80x80/EFF6FF/3B82F6?text=W1' }],
                        specifications: { "Carico Massimo": "15kg", "Giri Centrifuga": "1200rpm" }
                    };
                } else { // منتج افتراضي إذا لم يتم العثور على المعرف
                    currentProductDataGlobal = { id: productId, name_it: `Prodotto Sconosciuto ${productId}`, productType: "unknown", price: "0.00", short_description_it: "Dettagli non disponibili."};
                }
                // --- نهاية بيانات المحاكاة ---

                addProductToGlobalSearchList(currentProductDataGlobal); 
                updateProductPageDOM(currentProductDataGlobal);

                const activeThumb = document.querySelector('#productDetailPageContent .product-thumbnail-gallery .thumbnail-item.active-thumbnail') || document.querySelector('#productDetailPageContent .product-thumbnail-gallery .thumbnail-item[data-type="3d"]');
                if (activeThumb) {
                    activeThumb.click(); // هذا سيستدعي show3DModel أو showImage
                } else if (currentProductDataGlobal.model_3d_file_url || currentProductDataGlobal.productType) { // تحقق من productType للنماذج الافتراضية
                    show3DModel(currentProductDataGlobal.model_3d_file_url, currentProductDataGlobal.productType);
                } else if (currentProductDataGlobal.images && currentProductDataGlobal.images.length > 0) {
                    showImage(currentProductDataGlobal.images[0].image);
                } else {
                    showImage('https://placehold.co/600x400/F3F4F6/CCC?text=Prodotto');
                }

            } catch (error) {
                console.error("Error in fetchAndDisplayProduct:", error);
                if (productInfoColumn) productInfoColumn.innerHTML = `<p class="text-red-600 p-4 text-center">Errore caricamento: ${error.message}</p>`;
            } finally {
                if (modelLoadingIndicatorElement) modelLoadingIndicatorElement.style.display = 'none';
            }
        }
        
        function initThreeJSProductPage() { 
            if (!productMainDisplayElement || typeof THREE === 'undefined' || typeof THREE.OrbitControls === 'undefined') return false;
            if (threeJsCanvas && threeJsCanvas.parentElement) threeJsCanvas.parentElement.removeChild(threeJsCanvas);
            if (renderer) renderer.dispose();
            if (animationFrameId) cancelAnimationFrame(animationFrameId);

            scene = new THREE.Scene(); scene.background = null; // Transparent background
            const cw = productMainDisplayElement.clientWidth, ch = productMainDisplayElement.clientHeight;
            camera = new THREE.PerspectiveCamera(45, cw / ch, 0.1, 1000);
            camera.position.copy(defaultCameraPosition);
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }); // alpha: true for transparency
            renderer.setSize(cw, ch); renderer.setPixelRatio(window.devicePixelRatio);
            renderer.shadowMap.enabled = true; renderer.outputEncoding = THREE.sRGBEncoding;
            threeJsCanvas = renderer.domElement;
            clock = new THREE.Clock();
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.9); scene.add(ambientLight); 
            const dirLight1 = new THREE.DirectionalLight(0xffffff, 0.8); dirLight1.position.set(5,8,5); dirLight1.castShadow = true; scene.add(dirLight1);
            const dirLight2 = new THREE.DirectionalLight(0xffffff, 0.5); dirLight2.position.set(-5, 5, -3); scene.add(dirLight2);

            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true; controls.minDistance = 1; controls.maxDistance = 10; controls.target.set(0,0.8,0); 
            
            function animateLoop() {
                animationFrameId = requestAnimationFrame(animateLoop);
                const delta = clock.getDelta();
                if (mixer) mixer.update(delta);
                if(typeof TWEEN !== 'undefined') TWEEN.update(); // تأكد من تحديث TWEEN
                controls.update(); renderer.render(scene, camera);
            }
            animateLoop();
            window.addEventListener('resize', () => { 
                 if (productMainDisplayElement.clientWidth > 0 && productMainDisplayElement.clientHeight > 0) {
                    camera.aspect = productMainDisplayElement.clientWidth / productMainDisplayElement.clientHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(productMainDisplayElement.clientWidth, productMainDisplayElement.clientHeight);
                }
            });
            return true;
        }

        function clearSceneModels() {
            if (modelGroup) {
                scene.remove(modelGroup);
                // Dispose geometries and materials if necessary
                modelGroup.traverse(child => {
                    if (child.isMesh) {
                        if (child.geometry) child.geometry.dispose();
                        if (child.material) {
                            if (Array.isArray(child.material)) {
                                child.material.forEach(mat => mat.dispose());
                            } else {
                                child.material.dispose();
                            }
                        }
                    }
                });
                modelGroup = null;
            }
            if (loadedGLTFModelGroup) {
                scene.remove(loadedGLTFModelGroup);
                 loadedGLTFModelGroup.traverse(child => {
                    if (child.isMesh) {
                        if (child.geometry) child.geometry.dispose();
                        if (child.material) {
                             if (Array.isArray(child.material)) {
                                child.material.forEach(mat => mat.dispose());
                            } else {
                                child.material.dispose();
                            }
                        }
                    }
                });
                loadedGLTFModelGroup = null;
            }
            // Reset specific model parts
            doorLeftPivot = null; doorRightPivot = null;
            ovenDoorPivot = null; ovenTrayMesh = null;
            mixer = null; openAction = null; closeAction = null;
        }

        function createDefaultRefrigeratorModel() {
            clearSceneModels(); // Clear previous models
            modelGroup = new THREE.Group();
            modelGroup.name = "defaultRefrigeratorModel";

            const fridgeWidth = 1.2; const fridgeHeight = 1.8; const fridgeDepth = 0.7; const doorThickness = 0.08;
            const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0xD0D0D0, metalness: 0.6, roughness: 0.4 });
            const doorMaterial = new THREE.MeshStandardMaterial({ color: 0xE0E0E0, metalness: 0.5, roughness: 0.5 });
            const bodyGeometry = new THREE.BoxGeometry(fridgeWidth, fridgeHeight, fridgeDepth);
            const bodyMesh = new THREE.Mesh(bodyGeometry, bodyMaterial);
            bodyMesh.position.y = fridgeHeight / 2; bodyMesh.castShadow = true; bodyMesh.receiveShadow = true;
            modelGroup.add(bodyMesh);

            doorLeftPivot = new THREE.Group(); doorLeftPivot.name = "doorLeftPivot";
            doorLeftPivot.position.set(-fridgeWidth / 2, fridgeHeight / 2, fridgeDepth / 2); modelGroup.add(doorLeftPivot);
            const doorLeftGeometry = new THREE.BoxGeometry(fridgeWidth / 2, fridgeHeight, doorThickness);
            const doorLeftMesh = new THREE.Mesh(doorLeftGeometry, doorMaterial); doorLeftMesh.name = "doorLeftMesh";
            doorLeftMesh.position.x = (fridgeWidth / 2) / 2; doorLeftMesh.castShadow = true; doorLeftMesh.receiveShadow = true;
            doorLeftPivot.add(doorLeftMesh);
            
            doorRightPivot = new THREE.Group(); doorRightPivot.name = "doorRightPivot";
            doorRightPivot.position.set(fridgeWidth / 2, fridgeHeight / 2, fridgeDepth / 2); modelGroup.add(doorRightPivot);
            const doorRightGeometry = new THREE.BoxGeometry(fridgeWidth / 2, fridgeHeight, doorThickness);
            const doorRightMesh = new THREE.Mesh(doorRightGeometry, doorMaterial); doorRightMesh.name = "doorRightMesh";
            doorRightMesh.position.x = -(fridgeWidth / 2) / 2; doorRightMesh.castShadow = true; doorRightMesh.receiveShadow = true;
            doorRightPivot.add(doorRightMesh);

            mixer = new THREE.AnimationMixer(modelGroup); 
            const times = [0, 0.8]; 
            const openAngle = -Math.PI / 2.2; 
            const qLeftOpenStart = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0));
            const qLeftOpenEnd = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, openAngle, 0));
            const qRightOpenStart = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0));
            const qRightOpenEnd = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -openAngle, 0)); 
            const leftDoorOpenTrack = new THREE.QuaternionKeyframeTrack('doorLeftPivot.quaternion', times, qLeftOpenStart.toArray().concat(qLeftOpenEnd.toArray()));
            const rightDoorOpenTrack = new THREE.QuaternionKeyframeTrack('doorRightPivot.quaternion', times, qRightOpenStart.toArray().concat(qRightOpenEnd.toArray()));
            const openClip = new THREE.AnimationClip('openFridge', -1, [leftDoorOpenTrack, rightDoorOpenTrack]);
            openAction = mixer.clipAction(openClip); openAction.setLoop(THREE.LoopOnce); openAction.clampWhenFinished = true;

            const qLeftCloseStart = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, openAngle, 0));
            const qLeftCloseEnd = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0));
            const qRightCloseStart = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -openAngle, 0));
            const qRightCloseEnd = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0));
            const leftDoorCloseTrack = new THREE.QuaternionKeyframeTrack('doorLeftPivot.quaternion', times, qLeftCloseStart.toArray().concat(qLeftCloseEnd.toArray()));
            const rightDoorCloseTrack = new THREE.QuaternionKeyframeTrack('doorRightPivot.quaternion', times, qRightCloseStart.toArray().concat(qRightCloseEnd.toArray()));
            const closeClip = new THREE.AnimationClip('closeFridge', -1, [leftDoorCloseTrack, rightDoorCloseTrack]);
            closeAction = mixer.clipAction(closeClip); closeAction.setLoop(THREE.LoopOnce); closeAction.clampWhenFinished = true;

            if(scene) scene.add(modelGroup);
            if(controls) controls.target.set(0, fridgeHeight / 2, 0); 
            isModelOpen = false; 
        }

        function createOvenModel() {
            clearSceneModels();
            modelGroup = new THREE.Group();
            modelGroup.name = "defaultOvenModel";

            const ovenWidth = 0.9, ovenHeight = 0.7, ovenDepth = 0.6;
            const doorThickness = 0.05, trayThickness = 0.02, trayDepth = ovenDepth * 0.8, trayWidth = ovenWidth * 0.85;
            const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0x555555, metalness: 0.8, roughness: 0.3 });
            const doorMaterial = new THREE.MeshStandardMaterial({ color: 0x666666, metalness: 0.7, roughness: 0.4, transparent: true, opacity: 0.8 });
            const glassMaterial = new THREE.MeshStandardMaterial({ color: 0x222222, metalness: 0.1, roughness: 0.1, transparent: true, opacity: 0.5 });
            const trayMaterial = new THREE.MeshStandardMaterial({ color: 0xAAAAAA, metalness: 0.9, roughness: 0.2 });

            // Oven Body
            const bodyMesh = new THREE.Mesh(new THREE.BoxGeometry(ovenWidth, ovenHeight, ovenDepth), bodyMaterial);
            bodyMesh.position.y = ovenHeight / 2;
            modelGroup.add(bodyMesh);

            // Oven Door (Pivot at bottom)
            ovenDoorPivot = new THREE.Group();
            ovenDoorPivot.name = "ovenDoorPivot";
            ovenDoorPivot.position.set(0, doorThickness / 2, ovenDepth / 2); // Pivot at bottom front edge
            modelGroup.add(ovenDoorPivot);

            const doorFrameWidth = ovenWidth * 0.95;
            const doorFrameHeight = ovenHeight * 0.9;
            const doorMesh = new THREE.Mesh(new THREE.BoxGeometry(doorFrameWidth, doorFrameHeight, doorThickness), doorMaterial);
            doorMesh.position.y = doorFrameHeight / 2 - doorThickness/2; // Align door front with pivot
            ovenDoorPivot.add(doorMesh);
            
            // Door Glass
            const glassMesh = new THREE.Mesh(new THREE.BoxGeometry(doorFrameWidth * 0.8, doorFrameHeight * 0.7, doorThickness * 0.5), glassMaterial);
            glassMesh.position.y = doorFrameHeight/2 - doorThickness/2;
            glassMesh.position.z = 0.001; // Slightly in front of door mesh
            ovenDoorPivot.add(glassMesh);


            // Oven Tray (Platò)
            ovenTrayMesh = new THREE.Mesh(new THREE.BoxGeometry(trayWidth, trayThickness, trayDepth), trayMaterial);
            ovenTrayMesh.name = "ovenMainTray"; // اسم مهم للاكسسوارات
            ovenTrayMesh.position.set(0, ovenHeight * 0.4, 0); // Initial position inside
            modelGroup.add(ovenTrayMesh);

            // Accessories placeholders (can be made visible/interactive via accessory toggles)
            const grillAccessory = new THREE.Mesh(new THREE.BoxGeometry(trayWidth, 0.01, trayDepth * 0.95), new THREE.MeshStandardMaterial({color: 0x777777, wireframe: true}));
            grillAccessory.name = "ovenGrillAccessory";
            grillAccessory.position.set(0, ovenHeight * 0.6, 0);
            grillAccessory.visible = false; // Initially hidden
            modelGroup.add(grillAccessory);


            scene.add(modelGroup);
            if (controls) controls.target.set(0, ovenHeight / 2, 0);
            
            isOvenDoorOpen = false;
            isOvenTrayOut = false;
            updateOvenControlIcons();
        }

        function createBlenderModel() {
            clearSceneModels();
            modelGroup = new THREE.Group();
            modelGroup.name = "defaultBlenderModel";
            const baseRadius = 0.1, baseHeight = 0.15;
            const jarRadiusTop = 0.08, jarRadiusBottom = 0.05, jarHeight = 0.25;
            
            const baseMaterial = new THREE.MeshStandardMaterial({ color: 0xCCCCCC, metalness: 0.5, roughness: 0.5 });
            const jarMaterial = new THREE.MeshStandardMaterial({ color: 0xDDDDFF, metalness: 0.2, roughness: 0.1, transparent: true, opacity: 0.6 });

            const baseMesh = new THREE.Mesh(new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 32), baseMaterial);
            baseMesh.position.y = baseHeight / 2;
            modelGroup.add(baseMesh);

            const jarMesh = new THREE.Mesh(new THREE.CylinderGeometry(jarRadiusTop, jarRadiusBottom, jarHeight, 32), jarMaterial);
            jarMesh.position.y = baseHeight + jarHeight / 2;
            modelGroup.add(jarMesh);
            
            scene.add(modelGroup);
            if (controls) controls.target.set(0, baseHeight + jarHeight/2, 0);
        }

        function createWashingMachineModel() {
            clearSceneModels();
            modelGroup = new THREE.Group();
            modelGroup.name = "defaultWashingMachineModel";
            const machineWidth = 0.6, machineHeight = 0.85, machineDepth = 0.6;
            const doorRadius = 0.2;

            const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0xF0F0F0, metalness: 0.3, roughness: 0.6 });
            const doorMaterial = new THREE.MeshStandardMaterial({ color: 0xDDEEFF, metalness: 0.2, roughness: 0.2, transparent: true, opacity: 0.5 });

            const bodyMesh = new THREE.Mesh(new THREE.BoxGeometry(machineWidth, machineHeight, machineDepth), bodyMaterial);
            bodyMesh.position.y = machineHeight / 2;
            modelGroup.add(bodyMesh);

            const doorMesh = new THREE.Mesh(new THREE.CylinderGeometry(doorRadius, doorRadius, 0.05, 32), doorMaterial);
            doorMesh.rotation.x = Math.PI / 2;
            doorMesh.position.set(0, machineHeight * 0.55, machineDepth / 2 + 0.025);
            modelGroup.add(doorMesh);

            scene.add(modelGroup);
            if (controls) controls.target.set(0, machineHeight / 2, 0);
        }


        function loadGLTFModelProductPage(modelUrl) {
            clearSceneModels();
            if (!modelUrl || !scene || typeof THREE.GLTFLoader === 'undefined') {
                // Fallback to a very simple placeholder if GLTF loading fails or no URL
                const placeholderGeo = new THREE.BoxGeometry(1,1,1);
                const placeholderMat = new THREE.MeshStandardMaterial({color: 0xff0000});
                modelGroup = new THREE.Mesh(placeholderGeo, placeholderMat);
                modelGroup.position.y = 0.5;
                scene.add(modelGroup);
                if (modelLoadingIndicatorElement) modelLoadingIndicatorElement.style.display = 'none';
                if (toggleAnimationBtnElement) toggleAnimationBtnElement.disabled = true; 
                return;
            }
            const loader = new THREE.GLTFLoader();
            if (modelLoadingIndicatorElement) modelLoadingIndicatorElement.style.display = 'flex';
            
            loader.load(modelUrl, (gltf) => {
                loadedGLTFModelGroup = gltf.scene; 
                const box = new THREE.Box3().setFromObject(loadedGLTFModelGroup);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());
                let scaleFactor = 1.8 / Math.max(size.x, size.y, size.z); 
                if (Math.max(size.x, size.y, size.z) === 0 || !isFinite(scaleFactor)) scaleFactor = 1; 

                loadedGLTFModelGroup.scale.set(scaleFactor, scaleFactor, scaleFactor);
                loadedGLTFModelGroup.position.sub(center.multiplyScalar(scaleFactor));
                const yOffset = box.min.y * scaleFactor; 
                loadedGLTFModelGroup.position.y -= yOffset;

                loadedGLTFModelGroup.traverse(c => { if(c.isMesh) {c.castShadow = true; c.receiveShadow = true;} });
                scene.add(loadedGLTFModelGroup);
                
                // Attempt to find door pivots for GLTF (example names)
                doorLeftPivot = loadedGLTFModelGroup.getObjectByName("Door_Left_Pivot") || loadedGLTFModelGroup.getObjectByName("DoorL_GRP");
                doorRightPivot = loadedGLTFModelGroup.getObjectByName("Door_Right_Pivot") || loadedGLTFModelGroup.getObjectByName("DoorR_GRP");

                if (gltf.animations && gltf.animations.length > 0) {
                    mixer = new THREE.AnimationMixer(loadedGLTFModelGroup); 
                    const animNameOpen = gltf.animations.find(a => a.name.toLowerCase().includes('open'))?.name || gltf.animations[0].name; 
                    const animNameClose = gltf.animations.find(a => a.name.toLowerCase().includes('close'))?.name;

                    if (animNameOpen) {
                        openAction = mixer.clipAction(THREE.AnimationClip.findByName(gltf.animations, animNameOpen));
                        openAction.setLoop(THREE.LoopOnce); openAction.clampWhenFinished = true;
                    }
                    if (animNameClose) {
                        closeAction = mixer.clipAction(THREE.AnimationClip.findByName(gltf.animations, animNameClose));
                        closeAction.setLoop(THREE.LoopOnce); closeAction.clampWhenFinished = true;
                    } else if (openAction) { 
                        closeAction = mixer.clipAction(openAction.getClip().clone()); 
                        closeAction.timeScale = -1;
                        closeAction.setLoop(THREE.LoopOnce); closeAction.clampWhenFinished = true;
                    }
                     isModelOpen = false; 
                } else {
                    mixer = null; openAction = null; closeAction = null;
                }

                if (controls) controls.target.copy(loadedGLTFModelGroup.position);
                if (modelLoadingIndicatorElement) modelLoadingIndicatorElement.style.display = 'none';
                if (toggleAnimationBtnElement) toggleAnimationBtnElement.disabled = !(openAction && closeAction);
            }, undefined, (error) => {
                console.error('Errore caricamento GLTF:', modelUrl, error);
                // Fallback to a simple red box if GLTF fails
                const placeholderGeo = new THREE.BoxGeometry(1,1,1);
                const placeholderMat = new THREE.MeshStandardMaterial({color: 0xff0000});
                modelGroup = new THREE.Mesh(placeholderGeo, placeholderMat);
                modelGroup.position.y = 0.5;
                scene.add(modelGroup);
                if (toggleAnimationBtnElement) toggleAnimationBtnElement.disabled = true;
            });
        }
       
        function show3DModel(modelUrl = null, productType = 'refrigerator') { 
            productMainDisplayElement.innerHTML = ''; 
            if (modelLoadingIndicatorElement) { productMainDisplayElement.appendChild(modelLoadingIndicatorElement); modelLoadingIndicatorElement.style.display = 'flex';}
            
            if (!threeJsInitialized) threeJsInitialized = initThreeJSProductPage();
            
            if (threeJsInitialized) {
                clearSceneModels(); // Clear previous models before adding new one
                if (modelUrl && typeof THREE.GLTFLoader !== 'undefined') {
                    loadGLTFModelProductPage(modelUrl); // This will also handle GLTF animations
                } else {
                    // Load default model based on productType
                    switch (productType) {
                        case 'oven':
                            createOvenModel();
                            break;
                        case 'blender':
                            createBlenderModel();
                            break;
                        case 'washing_machine':
                            createWashingMachineModel();
                            break;
                        case 'refrigerator':
                        default:
                            createDefaultRefrigeratorModel(); // This has its own animation setup
                            break;
                    }
                    if (modelLoadingIndicatorElement) modelLoadingIndicatorElement.style.display = 'none';
                }

                if (threeJsCanvas && !threeJsCanvas.parentElement) productMainDisplayElement.appendChild(threeJsCanvas);
                // Re-append appliance controls if they were removed
                if (applianceControlsContainerElement && !applianceControlsContainerElement.parentElement) {
                    productMainDisplayElement.appendChild(applianceControlsContainerElement);
                }

                if (controls) controls.enabled = true;
                if (!animationFrameId && renderer) { 
                    function animateLoop() { 
                        animationFrameId = requestAnimationFrame(animateLoop); 
                        const delta = clock.getDelta();
                        if(mixer) mixer.update(delta);
                        if(typeof TWEEN !== 'undefined') TWEEN.update();
                        controls.update(); 
                        renderer.render(scene, camera); 
                    }
                    animateLoop();
                }
                // Enable/disable animation buttons based on model capabilities
                if (toggleAnimationBtnElement) {
                    toggleAnimationBtnElement.disabled = !(openAction && closeAction) && productType !== 'oven';
                }
                updateApplianceControlsUI(productType);
            }
        }

        function showImage(src) {
            if (controls) controls.enabled = false; 
            if (animationFrameId) { cancelAnimationFrame(animationFrameId); animationFrameId = null; }
            if (productMainDisplayElement) productMainDisplayElement.innerHTML = `<img src="${src}" alt="Immagine Prodotto Ingrandita" class="w-full h-full object-contain rounded-md">`;
            // Ensure appliance controls are hidden when showing an image
            if (applianceControlsContainerElement) applianceControlsContainerElement.classList.add('hidden');
            if (toggleAnimationBtnElement) toggleAnimationBtnElement.style.display = 'none';
        }

        function reinitializeProductThumbnails() {
             const allThumbnails = document.querySelectorAll('#productDetailPageContent .product-thumbnail-gallery .thumbnail-item');
            allThumbnails.forEach(thumbnail => {
                const newThumbnail = thumbnail.cloneNode(true); 
                thumbnail.parentNode.replaceChild(newThumbnail, thumbnail);
                newThumbnail.addEventListener('click', () => {
                    allThumbnails.forEach(item => item.classList.remove('active-thumbnail'));
                    newThumbnail.classList.add('active-thumbnail');
                    const type = newThumbnail.dataset.type;
                    const productType = currentProductDataGlobal ? currentProductDataGlobal.productType : 'refrigerator';
                    if (type === '3d') show3DModel(newThumbnail.dataset.src || null, productType); 
                    else if (type === 'image') {
                        if (newThumbnail.dataset.src) showImage(newThumbnail.dataset.src);
                        if (toggleAnimationBtnElement) toggleAnimationBtnElement.style.display = 'none'; // Hide generic button
                        if (applianceControlsContainerElement) applianceControlsContainerElement.classList.add('hidden'); // Hide specific controls
                    }
                });
            });
        }
        function reinitializeAccessoryListeners() { 
            document.querySelectorAll('#productDetailPageContent .accessory-toggle').forEach(toggle => {
                const newToggle = toggle.cloneNode(true);
                toggle.parentNode.replaceChild(newToggle, toggle);
                newToggle.addEventListener('change', (event) => { 
                    const meshName = event.target.dataset.accessoryMesh;
                    const targetModel = loadedGLTFModelGroup || modelGroup; 
                    if (meshName && targetModel) { 
                        const accessoryObject = targetModel.getObjectByName(meshName);
                        if (accessoryObject) accessoryObject.visible = event.target.checked;
                        else console.warn(`Accessory mesh "${meshName}" not found.`);
                    }
                });
            });
             document.querySelectorAll('#productDetailPageContent .accessory-gallery-trigger').forEach(trigger => {
                const newTrigger = trigger.cloneNode(true);
                trigger.parentNode.replaceChild(newTrigger, trigger);
                newTrigger.addEventListener('click', () => {
                    const targetGallerySelector = newTrigger.dataset.galleryTarget;
                    const targetGallery = document.querySelector(targetGallerySelector);
                    if (targetGallery) {
                        const isHidden = targetGallery.classList.toggle('hidden');
                        newTrigger.setAttribute('aria-expanded', !isHidden);
                    }
                 });
            });
            document.querySelectorAll('#productDetailPageContent .accessory-add-btn').forEach(button => {
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);
                newButton.addEventListener('click', handleAddToCartGlobal);
            });
        }
        function handleAddToCartGlobal(event) {
            const button = event.currentTarget;
            let productId;
            let itemType = 'product'; 
            if (button.classList.contains('accessory-add-btn')) {
                productId = button.dataset.accessoryId; itemType = 'accessory';
            } else {
                if (!currentProductDataGlobal || !currentProductDataGlobal.id) return;
                productId = currentProductDataGlobal.id;
            }
            const quantityInput = document.getElementById('quantity');
            const quantity = (itemType === 'accessory' || !quantityInput) ? 1 : parseInt(quantityInput.value);
            alert(`(Simulazione) ${itemType === 'accessory' ? 'Accessorio' : 'Prodotto'} ID ${productId} (Quantità: ${quantity}) aggiunto al carrello!`);
        }

        // --- دوال التحكم في الأجهزة ---
        function updateApplianceControlsUI(productType) {
            if (!applianceControlsContainerElement || !toggleAnimationBtnElement) return;

            applianceControlsContainerElement.classList.add('hidden');
            toggleAnimationBtnElement.style.display = 'none'; // Hide generic animation button by default

            if (productType === 'oven') {
                applianceControlsContainerElement.classList.remove('hidden');
                updateOvenControlIcons();
            } else if (productType === 'refrigerator' && openAction && closeAction) {
                toggleAnimationBtnElement.style.display = 'inline-block';
                toggleAnimationBtnElement.innerHTML = isModelOpen ? '<i class="fas fa-door-closed"></i> Chiudi Frigo' : '<i class="fas fa-door-open"></i> Apri Frigo';
                toggleAnimationBtnElement.disabled = false;
            } else {
                 toggleAnimationBtnElement.disabled = true; // Disable if no specific actions
            }
        }

        function toggleOvenDoor() {
            if (!ovenDoorPivot || typeof TWEEN === 'undefined') return;
            const targetRotationX = isOvenDoorOpen ? 0 : -Math.PI / 1.8; // Opens downwards
            new TWEEN.Tween(ovenDoorPivot.rotation)
                .to({ x: targetRotationX }, 500) // 500ms animation
                .easing(TWEEN.Easing.Quadratic.Out)
                .onComplete(() => {
                    isOvenDoorOpen = !isOvenDoorOpen;
                    updateOvenControlIcons();
                })
                .start();
        }

        function toggleOvenTray() {
            if (!ovenTrayMesh || typeof TWEEN === 'undefined') return;
            const ovenDepth = 0.6; // Must match createOvenModel
            const trayOutPositionZ = ovenDepth * 0.3; // How far it slides out
            const targetPositionZ = isOvenTrayOut ? 0 : trayOutPositionZ;

            new TWEEN.Tween(ovenTrayMesh.position)
                .to({ z: targetPositionZ }, 700) // 700ms animation
                .easing(TWEEN.Easing.Quadratic.Out)
                .onComplete(() => {
                    isOvenTrayOut = !isOvenTrayOut;
                    updateOvenControlIcons();
                })
                .start();
        }
        
        function updateOvenControlIcons() {
            if (ovenDoorBtnElement) {
                ovenDoorBtnElement.innerHTML = isOvenDoorOpen ? '<i class="fas fa-door-open"></i>' : '<i class="fas fa-door-closed"></i>';
                ovenDoorBtnElement.title = isOvenDoorOpen ? "Chiudi Porta Forno" : "Apri Porta Forno";
            }
            if (ovenTrayBtnElement) {
                ovenTrayBtnElement.innerHTML = isOvenTrayOut ? '<i class="fas fa-arrow-alt-circle-left"></i>' : '<i class="fas fa-arrow-alt-circle-right"></i>';
                ovenTrayBtnElement.title = isOvenTrayOut ? "Ritira Platò" : "Estrai Platò";
            }
        }


        // --- دوال خاصة بصفحة الفئة ---
        function createCategoryProductCard(product) {
            const cardLink = document.createElement('a');
            cardLink.href = `?page=product&id=${product.id}`;
            cardLink.className = 'product-card group';
            const imageUrl = product.thumbnail || product.image || `https://placehold.co/300x240/FEE2E2/B91C1C?text=${encodeURIComponent(product.name_it || 'Prodotto')}`;
            cardLink.innerHTML = `
                <div class="product-card-image-container">
                    <img src="${imageUrl}" alt="${product.name_it || ''}" class="product-card-image" onerror="this.onerror=null;this.src='https://placehold.co/300x240/FEE2E2/B91C1C?text=No+Img';">
                </div>
                <div class="product-card-content">
                    <div><h3 class="product-card-title group-hover:text-red-600 transition-colors">${product.name_it || 'Prodotto'}</h3>
                    ${product.sku ? `<p class="product-card-sku">COD: ${product.sku}</p>` : ''}</div>
                    <div class="mt-auto"><p class="product-card-price">€${parseFloat(product.price || 0).toFixed(2)}</p>
                    <button type="button" class="btn-product-card">Vedi Dettagli</button></div>
                </div>`;
            return cardLink;
        }
        function renderCategoryProducts(productsToRender) {
            const grid = document.getElementById('productGridContainer');
            const countEl = document.getElementById('productCount');
            const statusMsgContainer = document.getElementById('productsStatusMessageContainer');
            const loadingMsgEl = document.getElementById('loadingProductsMessage');
            
            grid.innerHTML = '';
            if (productsToRender.length > 0) {
                productsToRender.forEach(p => {
                    grid.appendChild(createCategoryProductCard(p));
                    addProductToGlobalSearchList(p); 
                });
                statusMsgContainer.style.display = 'none';
            } else {
                loadingMsgEl.textContent = 'Nessun prodotto trovato per i filtri selezionati.';
                statusMsgContainer.style.display = 'block';
            }
            countEl.textContent = productsToRender.length;
        }
        function initializeCategoryPriceSlider(products, defaultMin = 0, defaultMax = 1000) {
            const sliderEl = document.getElementById('price-slider');
            const lowerValEl = document.getElementById('price-lower-value');
            const upperValEl = document.getElementById('price-upper-value');
            if (!sliderEl || !lowerValEl || !upperValEl) return;

            let min = defaultMin, max = defaultMax, start = [defaultMin, defaultMax];
            if (products && products.length > 0) {
                const prices = products.map(p => parseFloat(p.price)).filter(p => !isNaN(p));
                if (prices.length > 0) {
                    min = Math.floor(Math.min(...prices)); max = Math.ceil(Math.max(...prices)); start = [min, max];
                }
            }
            if (min >= max) max = min + (min > 0 ? Math.max(100, min * 0.2) : 100);
            if (min === 0 && max === 0) max = defaultMax;
            start[0] = Math.max(min, Math.min(start[0], max)); start[1] = Math.max(start[0], Math.min(start[1], max));

            if (categoryPriceSliderInstance) categoryPriceSliderInstance.destroy();
            try {
                categoryPriceSliderInstance = noUiSlider.create(sliderEl, {
                    start: start, connect: true, step: 1, range: {'min': min, 'max': max},
                    format: { to: v => Math.round(v), from: v => Number(v) }, 
                });
                categoryPriceSliderInstance.on('update', (values, handle) => {
                    const val = Math.round(values[handle]);
                    if (handle === 0) lowerValEl.textContent = `€${val}`; else upperValEl.textContent = `€${val}`;
                });
                lowerValEl.textContent = `€${Math.round(categoryPriceSliderInstance.get()[0])}`;
                upperValEl.textContent = `€${Math.round(categoryPriceSliderInstance.get()[1])}`;
            } catch (err) { console.error("Failed to create price slider:", err); }
        }
        function filterAndSortCategoryProducts() {
            let products = [...categoryOriginalProductList];
            if (categoryPriceSliderInstance) {
                const [minPrice, maxPrice] = categoryPriceSliderInstance.get().map(Number);
                products = products.filter(p => { const price = parseFloat(p.price); return !isNaN(price) && price >= minPrice && price <= maxPrice; });
            }
            const sortVal = document.getElementById('sortOrder')?.value || 'relevance';
            switch (sortVal) {
                case 'price_asc': products.sort((a,b) => parseFloat(a.price) - parseFloat(b.price)); break;
                case 'price_desc': products.sort((a,b) => parseFloat(b.price) - parseFloat(a.price)); break;
                case 'name_asc': products.sort((a,b) => (a.name_it||'').localeCompare(b.name_it||'')); break;
            }
            categoryCurrentProductList = products;
            renderCategoryProducts(categoryCurrentProductList);
        }
        async function loadCategoryPageData(categorySlug) {
            const titleEl = document.getElementById('categoryPageTitle');
            const descEl = document.getElementById('categoryPageDescription');
            const breadcrumbEl = document.getElementById('breadcrumbCategoryName');
            const loadingMsgEl = document.getElementById('loadingProductsMessage');
            const statusContainer = document.getElementById('productsStatusMessageContainer');
            const gridEl = document.getElementById('productGridContainer');
            const countEl = document.getElementById('productCount');

            titleEl.textContent = 'Caricamento...'; breadcrumbEl.textContent = 'Caricamento...';
            if(descEl) descEl.textContent = ''; statusContainer.style.display = 'block';
            loadingMsgEl.textContent = 'Caricamento dati categoria...'; gridEl.innerHTML = ''; countEl.textContent = '0';

            try {
                const catResponse = await fetch(`${API_BASE_URL}/categories/?slug=${categorySlug}&is_active=true`);
                if (!catResponse.ok) throw new Error(`API error category details: ${catResponse.status}`);
                const catData = await catResponse.json();
                const currentCat = (catData.results || catData)[0];

                if (currentCat) {
                    titleEl.textContent = currentCat.name_it || "Categoria";
                    if(descEl) descEl.textContent = currentCat.description_it || "";
                    breadcrumbEl.textContent = currentCat.name_it || "Categoria";
                } else {
                    titleEl.textContent = "Categoria non Trovata"; throw new Error("Category not found");
                }

                loadingMsgEl.textContent = 'Caricamento prodotti...';
                const prodResponse = await fetch(`${API_BASE_URL}/products/?category__slug=${categorySlug}&is_active=true`);
                if (!prodResponse.ok) throw new Error(`API error products: ${prodResponse.status}`);
                const prodData = await prodResponse.json();
                categoryOriginalProductList = prodData.results || prodData;
                
                initializeCategoryPriceSlider(categoryOriginalProductList);
                filterAndSortCategoryProducts(); 
            } catch (error) {
                console.error("Error loading category page data:", error);
                titleEl.textContent = "Errore"; if(descEl) descEl.textContent = "Impossibile caricare.";
                breadcrumbEl.textContent = "Errore"; loadingMsgEl.textContent = "Errore caricamento.";
                initializeCategoryPriceSlider([], 0, 1000);
            }
        }

        // --- نظام التوجيه وإدارة عرض الصفحات ---
        function showPage(pageName) {
            document.getElementById('productDetailPageContent').classList.add('hidden');
            document.getElementById('categoryPageContent').classList.add('hidden');
            document.getElementById('priceFilterSection').classList.add('hidden'); 

            if (pageName === 'product') {
                document.getElementById('productDetailPageContent').classList.remove('hidden');
            } else if (pageName === 'category') {
                document.getElementById('categoryPageContent').classList.remove('hidden');
                document.getElementById('priceFilterSection').classList.remove('hidden'); 
            }
        }

        function router() {
            const urlParams = new URLSearchParams(window.location.search);
            const page = urlParams.get('page');
            let id = urlParams.get('id'); // Make id mutable
            const slug = urlParams.get('slug');

            loadGlobalCategoriesAndInitialProducts(); 

            if (page === 'product' && id) {
                showPage('product');
                fetchAndDisplayProduct(id);
            } else if (page === 'category' && slug) {
                showPage('category');
                loadCategoryPageData(slug);
            } else {
                // صفحة افتراضية إذا لم يتم تحديد شيء، أو لعرض منتج الاختبار
                showPage('product'); // عرض صفحة المنتج
                fetchAndDisplayProduct(testProductIdGlobal); // استخدام testProductIdGlobal
            }
        }

        // --- التهيئة عند تحميل الصفحة ---
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('currentYear').textContent = new Date().getFullYear(); // تحديث السنة في الفوتر

            productMainDisplayElement = document.getElementById('product-detail-main-display');
            modelLoadingIndicatorElement = document.getElementById('modelLoadingIndicator');
            toggleAnimationBtnElement = document.getElementById('toggleAnimationBtn');
            applianceControlsContainerElement = document.getElementById('applianceControlsContainer');
            ovenDoorBtnElement = document.getElementById('ovenDoorBtn');
            ovenTrayBtnElement = document.getElementById('ovenTrayBtn');


            setupMobileMenu();
            setupGlobalSearch();
            
            if (toggleAnimationBtnElement) { // زر الرسوم المتحركة العام (للثلاجة بشكل أساسي)
                toggleAnimationBtnElement.addEventListener('click', () => {
                    if (currentProductDataGlobal && currentProductDataGlobal.productType === 'refrigerator') {
                        if (!mixer || !openAction || !closeAction ) { 
                            console.warn("Modello 3D o animazioni non pronti per il frigorifero.");
                            return;
                        }
                        if (isModelOpen) { 
                            closeAction.reset().play();
                            if(openAction.isRunning()) openAction.stop(); 
                            toggleAnimationBtnElement.innerHTML = '<i class="fas fa-door-open"></i> Apri Frigo';
                        } else { 
                            openAction.reset().play();
                            if(closeAction.isRunning()) closeAction.stop(); 
                            toggleAnimationBtnElement.innerHTML = '<i class="fas fa-door-closed"></i> Chiudi Frigo';
                        }
                        isModelOpen = !isModelOpen; 
                    }
                });
            }

            // Event listeners for oven controls
            if (ovenDoorBtnElement) {
                ovenDoorBtnElement.addEventListener('click', toggleOvenDoor);
            }
            if (ovenTrayBtnElement) {
                ovenTrayBtnElement.addEventListener('click', toggleOvenTray);
            }


            document.querySelectorAll('#productDetailPageContent .btn-main-action[data-product-id="main_product"]').forEach(button => {
                button.addEventListener('click', handleAddToCartGlobal);
            });
            const productTabButtons = document.querySelectorAll('#productDetailPageContent .product-tab-button');
            productTabButtons.forEach(button => {
                button.addEventListener('click', () => { 
                    productTabButtons.forEach(btn => btn.classList.remove('active-tab'));
                    document.querySelectorAll('#productDetailPageContent .product-tab-content').forEach(content => content.classList.remove('active-tab-content'));
                    button.classList.add('active-tab');
                    const tabId = button.dataset.tab;
                    const activeContent = document.getElementById(tabId); 
                    if (activeContent) activeContent.classList.add('active-tab-content');
                });
            });

            const applyFilterButtonCat = document.getElementById('applyPriceFilterBtn');
            if (applyFilterButtonCat) {
                applyFilterButtonCat.addEventListener('click', filterAndSortCategoryProducts);
            }
            const sortOrderSelectCat = document.getElementById('sortOrder');
            if (sortOrderSelectCat) {
                sortOrderSelectCat.addEventListener('change', filterAndSortCategoryProducts);
            }
            
            router(); 
        });
    </script>
</body>
</html>
